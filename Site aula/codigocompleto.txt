<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Lista de Compras Interativa</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      max-width: 700px;
      margin: 0 auto;
      padding: 30px 20px;
      background-color: #f0f2f5;
      transition: background 0.8s ease;
    }

    .css-activation {
      animation: cssActivation 1.2s ease-out;
    }

    @keyframes cssActivation {
      0% {
        opacity: 0;
        transform: scale(0.95);
        filter: blur(6px);
      }
      100% {
        opacity: 1;
        transform: scale(1);
        filter: blur(0);
      }
    }

    h1 {
      color: #2c3e50;
      text-align: center;
      font-size: 2.2em;
    }

    .input-add {
      text-align: center;
      margin-bottom: 30px;
    }

    .input-add input[type="text"] {
      width: 60%;
      padding: 10px 14px;
      font-size: 16px;
      border: 2px solid #ccc;
      border-radius: 6px;
      transition: border-color 0.3s, box-shadow 0.3s;
    }

    .input-add input[type="text"]:focus {
      outline: none;
      border-color: #4caf50;
      box-shadow: 0 0 6px rgba(76, 175, 80, 0.3);
    }

    .input-add button {
      margin-left: 10px;
      padding: 10px 18px;
      font-size: 16px;
      background-color: #4caf50;
      border: none;
      border-radius: 6px;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .input-add button:hover {
      background-color: #388e3c;
    }

    ul {
      list-style: none;
      padding: 0;
    }

    li {
      background: white;
      margin: 10px 0;
      padding: 15px;
      border-radius: 10px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      font-size: 18px;
      transition: all 0.3s ease;
    }

    li:hover {
      transform: translateY(-3px);
      box-shadow: 0 5px 12px rgba(0, 0, 0, 0.15);
    }

    li label {
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .item-checkbox {
      width: 18px;
      height: 18px;
      cursor: pointer;
    }

    .buying-animation {
      animation: buyingPulse 0.5s ease-in-out, rainbow 2s linear infinite;
      background: linear-gradient(45deg, #ff6b6b, #ffd93d, #6bcf7f, #4d94ff);
      background-size: 300% 300%;
    }

    @keyframes buyingPulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.1); }
      100% { transform: scale(1); }
    }

    @keyframes rainbow {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    .converted {
      font-size: 26px;
      text-align: center;
      animation: emojiPop 0.5s ease-out;
    }

    @keyframes emojiPop {
      0% {
        transform: scale(0) rotate(180deg);
        opacity: 0;
      }
      70% {
        transform: scale(1.2) rotate(-10deg);
        opacity: 1;
      }
      100% {
        transform: scale(1) rotate(0deg);
        opacity: 1;
      }
    }

    .sell-animation {
      animation: sellAnimation 0.5s ease-in-out;
    }

    @keyframes sellAnimation {
      0% { opacity: 1; transform: scale(1); }
      50% { opacity: 0.3; transform: scale(0.7) rotate(15deg); }
      100% { opacity: 0; transform: scale(0) rotate(-15deg); }
    }

    button {
      background-color: #4CAF50;
      color: white;
      padding: 12px 24px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
      margin: 10px;
      transition: background-color 0.3s;
      min-width: 160px;
    }

    button:hover:not(:disabled) {
      background-color: #388e3c;
    }

    button:disabled {
      background-color: #a5d6a7;
      cursor: not-allowed;
    }

    .controls {
      text-align: center;
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 30px;
    }

    .explanation {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      padding: 20px;
      border-radius: 12px;
      margin-top: 30px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .explanation h2 {
      margin-top: 0;
      font-size: 1.6em;
    }

    .explanation p {
      margin: 10px 0;
      line-height: 1.6;
    }

    .no-css-warning {
      background: #ff6b6b;
      color: white;
      padding: 10px;
      border-radius: 6px;
      margin: 15px 0;
      text-align: center;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <h1>Lista de Compras</h1>

  <div class="input-add">
    <input type="text" id="newItemInput" placeholder="Adicione um novo item" />
    <button id="addItemBtn" title="Adicionar item">‚ûï Adicionar</button>
  </div>

  <ul id="itemList">
    <li data-original="Cama"><label><input type="checkbox" class="item-checkbox" /> Cama</label></li>
    <li data-original="Guarda-roupa"><label><input type="checkbox" class="item-checkbox" /> Guarda-roupa</label></li>
    <li data-original="Arm√°rio"><label><input type="checkbox" class="item-checkbox" /> Arm√°rio</label></li>
  </ul>

  <div class="controls">
    <button id="actionBtn" title="Comprar ou vender itens">üõí Comprar / üí∞ Vender</button>
    <button id="toggleCssBtn" title="Ativar ou desativar CSS">üé® Ativar CSS</button>
  </div>

  <div class="explanation">
    <h2>Como funciona?</h2>
    <p>Marque os itens que deseja comprar e clique no bot√£o ‚ÄúComprar / Vender‚Äù.</p>
    <p>Se nenhum item for marcado, a a√ß√£o ser√° feita em todos.</p>
    <p>Voc√™ pode adicionar novos itens na lista. Tamb√©m pode ativar ou desativar o estilo visual.</p>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      let cssEnabled = false;
      let isConverted = false;

      const emojiMap = {
        'cama': 'üõèÔ∏è',
        'guarda-roupa': 'üö™',
        'arm√°rio': 'üóÑÔ∏è',
        'armario': 'üóÑÔ∏è',
        'sapato': 'üëû',
        'chave': 'üîë',
        'livro': 'üìö',
        'mesa': 'ü™ë'
      };

      const styleTag = document.querySelector('style');
      const toggleCssBtn = document.getElementById('toggleCssBtn');
      const actionBtn = document.getElementById('actionBtn');
      const addItemBtn = document.getElementById('addItemBtn');
      const newItemInput = document.getElementById('newItemInput');
      const itemList = document.getElementById('itemList');

      function toggleCSS() {
        cssEnabled = !cssEnabled;
        if (cssEnabled) {
          document.body.classList.add('css-activation');
          toggleCssBtn.textContent = 'üé® Desativar CSS';
        } else {
          document.body.classList.remove('css-activation');
          toggleCssBtn.textContent = 'üé® Ativar CSS';
        }
      }

      function createListItem(text) {
        const li = document.createElement('li');
        li.setAttribute('data-original', text);
        const label = document.createElement('label');
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.className = 'item-checkbox';
        label.appendChild(checkbox);
        label.appendChild(document.createTextNode(' ' + text));
        li.appendChild(label);
        return li;
      }

      function addItem() {
        const text = newItemInput.value.trim();
        if (!text) return alert('Digite o nome do item.');
        const li = createListItem(text);
        itemList.appendChild(li);
        newItemInput.value = '';
      }

      function convertItemToEmoji(li) {
        return new Promise(resolve => {
          li.classList.add('buying-animation');
          setTimeout(() => {
            const originalText = li.getAttribute('data-original');
            const lowerText = originalText.toLowerCase().trim();
            const emoji = emojiMap[lowerText] || originalText;
            li.innerHTML = emoji;
            li.classList.remove('buying-animation');
            li.classList.add('converted');
            resolve();
          }, 600);
        });
      }

      function revertItem(li) {
        li.classList.add('sell-animation');
        setTimeout(() => {
          const originalText = li.getAttribute('data-original');
          li.innerHTML = `<label><input type="checkbox" class="item-checkbox" /> ${originalText}</label>`;
          li.classList.remove('converted', 'sell-animation');
        }, 600);
      }

      async function handleAction() {
        const selected = [...itemList.querySelectorAll('.item-checkbox:checked')].map(cb => cb.closest('li'));
        const items = selected.length > 0 ? selected : [...itemList.children];

        if (!isConverted) {
          isConverted = true;
          for (const li of items) await convertItemToEmoji(li);
        } else {
          isConverted = false;
          for (const li of items) revertItem(li);
        }
      }

      toggleCssBtn.addEventListener('click', toggleCSS);
      actionBtn.addEventListener('click', handleAction);
      addItemBtn.addEventListener('click', addItem);
      newItemInput.addEventListener('keydown', e => { if (e.key === 'Enter') addItem(); });
    });
  </script>
</body>
</html>
